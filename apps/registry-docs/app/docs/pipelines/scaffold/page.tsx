import { PipelineScaffoldTrees } from "@/components/scaffold-tree";

export default function PipelineScaffoldPage() {
  return (
    <div className="prose dark:prose-invert prose-neutral max-w-none">
      <h1>Pipeline Scaffold</h1>
      <p>
        Below is a visualization of the pipeline registry scaffolds. Each
        section shows the folder layout generated by the scaffold and the intent
        of the key folders.
      </p>
      <PipelineScaffoldTrees />

      <h2>What the folders mean</h2>

      <h3>{`{pipeline}/_meta`}</h3>
      <ul>
        <li>Holds pipeline-level metadata that is provider-agnostic.</li>
        <li>
          <strong>Files</strong>: `pipeline.json`, `README.md`, and `assets/`
          for images and lineage diagrams.
        </li>
        <li>
          Avoid placing detailed implementation docs here; keep docs near the
          language implementation.
        </li>
      </ul>

      <h3>{`{pipeline}/{version}/_meta`}</h3>
      <ul>
        <li>Version-level metadata for the pipeline.</li>
        <li>
          <strong>Files</strong>: `version.json`, `README.md`, and `assets/`.
        </li>
      </ul>

      <h3>{`{pipeline}/{version}/{author}/_meta`}</h3>
      <ul>
        <li>Provider/author-specific metadata and lineage assets.</li>
        <li>
          <strong>Files</strong>: `pipeline.json` (executable spec),
          `CHANGELOG.md`, `LICENSE`, `assets/` (e.g., `lineage.mmd`,
          `lineage.svg`).
        </li>
      </ul>

      <h3>Language implementations under {`{pipeline}/{version}/{author}`}</h3>
      <ul>
        <li>
          `python/{`{implementation}`}/` and `typescript/{`{implementation}`}/`
          contain helpers and runnable code.
        </li>
        <li>
          Prefer placing docs adjacent to the implementation:
          <ul>
            <li>
              `docs/` for human-facing guides (getting started, config, outputs)
            </li>
            <li>
              `schemas/` at the top level of the language directory for
              machine-readable datasets/index
            </li>
            <li>
              `src/` for code (with subfolders like `extract/`, `transform/`,
              `load/`)
            </li>
            <li>`tests/` for unit tests</li>
            <li>`scripts/` for automation like lineage generation</li>
            <li>`lineage/` for lineage-specific schemas and manifests</li>
          </ul>
        </li>
      </ul>

      <h2>Key Differences from Connectors</h2>
      <ul>
        <li>
          <strong>Lineage tracking</strong> - Pipelines include lineage diagrams
          and manifests
        </li>
        <li>
          <strong>Source/Destination config</strong> - Pipeline metadata
          includes source and destination specifications
        </li>
        <li>
          <strong>Transformation focus</strong> - More emphasis on
          transformation logic and data flow
        </li>
        <li>
          <strong>Scheduling</strong> - Built-in support for cron schedules and
          timezone configuration
        </li>
      </ul>

      <h2>Notes</h2>
      <ul>
        <li>
          `_meta` folders are for metadata and assets. Keep implementation docs
          inside the language directories.
        </li>
        <li>
          Place schemas at the top level of each language implementation (not
          under `src`).
        </li>
        <li>
          Lineage diagrams should be generated and stored in the provider
          `_meta/assets/` folder.
        </li>
      </ul>
    </div>
  );
}
